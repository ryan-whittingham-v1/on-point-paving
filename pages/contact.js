import Head from 'next/head';
import React, { useState, useEffect } from 'react';
import Notification from '../components/Notification';

import styles from '../styles/Contact.module.css';

export default function Contact() {
  const [formState, setFormState] = useState({
    name: '',
    phone: '',
    email: '',
    message: '',
  });

  const [honeypot, setHoneypot] = useState('');
  const [errorMessage, setErrorMessage] = useState('');
  const [success, setSuccess] = useState('');

  function handleSubmit(e) {
    e.preventDefault();

    //bot prevention
    if (honeypot) {
      return;
    }

    // name vailidation
    if (!formState.name) {
      setErrorMessage('Missing name.');
      return;
    }

    if (!formState.email) {
      setErrorMessage('Missing email.');
      return;
    }

    if (!formState.phone) {
      setErrorMessage('Missing phone.');
      return;
    }

    if (!formState.message) {
      setErrorMessage('Missing message.');
      return;
    }

    //name validation
    const nameRegex = /^[a-zA-Z ]{2,30}$/;
    if (!nameRegex.test(formState.name)) {
      setErrorMessage('Invalid name format.');
      return;
    }
    // email validation
    const emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
    if (!emailRegex.test(formState.email)) {
      setErrorMessage('Invalid email format.');
      return;
    }

    //phone validation
    const phoneRegex = /[0-9]{10}/;
    if (!phoneRegex.test(formState.phone)) {
      setErrorMessage('Invalid phone format');
      return;
    }

    //text area validation
    const textRegex = /[^a-zA-Z0-9 .,$?!@-]/g;
    if (!textRegex.test(formState.message)) {
      setErrorMessage('Invalid message format. Special symbols allowed: $?!@');
      return;
    }

    const url =
      'https://script.google.com/macros/s/AKfycbyM9TlvuuHiC3-mg9WiVUuo4DzPzps6hCkNC1_3P5zOfGzSjQg76IB1E4qH3GNofGRS/exec';
    const data = formState;
    var xhr = new XMLHttpRequest();
    xhr.open('POST', url);
    // xhr.withCredentials = true;
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4 && xhr.status === 200) {
        console.log('Form submitted');
        setSuccess(true);
      }
    };
    // url encode form data for sending as post data
    var encoded = Object.keys(data)
      .map(function (k) {
        return encodeURIComponent(k) + '=' + encodeURIComponent(data[k]);
      })
      .join('&');
    xhr.send(encoded);
  }

  return (
    <div className={styles.mainContainer}>
      <Head>
        <title>On Point Paving</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className={styles.headingContainer}>
          <h1>CONTACT US</h1>
        </div>
        <p className={styles.mainText}>
          On Point Paving is standing by to assist with all your paving needs.
          Give us a call at 360-720-7606 or contact us below to receive a prompt
          quote or anwer to any questions. We look forward to helping you find
          the best solution for your project.
        </p>
        <div className={styles.formContainer}>
          {!success && (
            <form onSubmit={handleSubmit}>
              <div className={styles.questionContainer}>
                <label>
                  <div className={styles.labelContainer}>NAME</div>
                  <div className={styles.inputContainer}>
                    <input
                      type="text"
                      name="name"
                      value={formState.name}
                      onChange={(e) =>
                        setFormState({ ...formState, name: e.target.value })
                      }
                    />
                  </div>
                </label>
              </div>
              <div className={styles.questionContainer}>
                <label>
                  <div className={styles.labelContainer}>PHONE</div>
                  <div className={styles.inputContainer}>
                    <input
                      type="tel"
                      name="phone"
                      value={formState.phone}
                      onChange={(e) =>
                        setFormState({ ...formState, phone: e.target.value })
                      }
                    />
                  </div>
                </label>
              </div>
              <div className={styles.questionContainer}>
                <label>
                  <div className={styles.labelContainer}>EMAIL</div>
                  <div className={styles.inputContainer}>
                    <input
                      type="email"
                      name="email"
                      value={formState.email}
                      onChange={(e) =>
                        setFormState({ ...formState, email: e.target.value })
                      }
                    />
                  </div>
                </label>
              </div>
              <div className={styles.questionContainer}>
                <label>
                  <div className={styles.labelContainer}>MESSAGE</div>
                  <div className={styles.inputContainer}>
                    <textarea
                      name="message"
                      value={formState.message}
                      rows="10"
                      cols="34"
                      onChange={(e) =>
                        setFormState({ ...formState, message: e.target.value })
                      }
                    />
                  </div>
                </label>
              </div>
              <div className={styles.honeypot}>
                <label>
                  HONEYPOT
                  <br />
                  <input
                    name="honeypot"
                    type="text"
                    value={honeypot}
                    onChange={(e) => setHoneypot(e.target.value)}
                  />
                </label>
              </div>
              {errorMessage && <Notification>{errorMessage}</Notification>}
              <div className={styles.submitButtonContainer}>
                <button type="submit">SUBMIT</button>
              </div>
            </form>
          )}
        </div>
      </main>
    </div>
  );
}
